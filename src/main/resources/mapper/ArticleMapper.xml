<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hniu.mapu.mapper.ArticleMapper">

	<!-- 基础结果映射 -->
	<resultMap id="ArticleResultMap" type="com.hniu.mapu.pojo.entity.Article">
		<id property="id" column="id"/>
		<result property="userId" column="user_id"/>
		<result property="categoryId" column="category_id"/>
		<result property="title" column="title"/>
		<result property="summary" column="summary"/>
		<result property="content" column="content"/>
		<result property="status" column="status"/>

		<result property="createTime" column="create_time"/>
		<result property="updateTime" column="update_time"/>

	</resultMap>

	<!-- 详细结果映射（包含关联对象） -->
	<resultMap id="ArticleDetailResultMap" type="com.hniu.mapu.pojo.entity.Article" extends="ArticleResultMap">
		<!-- 统计信息 -->
		<result property="commentCount" column="comment_count"/>
		<result property="favoriteCount" column="favorite_count"/>
		<!-- 作者信息 -->
		<association property="author" javaType="com.hniu.mapu.pojo.entity.User">
			<id property="id" column="author_id"/>
			<result property="username" column="author_username"/>
		<result property="nickname" column="author_nickname"/>
			<result property="avatar" column="author_avatar"/>
			<result property="gender" column="author_gender"/>
			<result property="phone" column="author_phone"/>
			<result property="email" column="author_email"/>
		</association>
		<!-- 类别信息 -->
		<association property="category" javaType="com.hniu.mapu.pojo.entity.ArticleCategory">
			<id property="id" column="category_id"/>
			<result property="name" column="category_name"/>
			<result property="description" column="category_description"/>
			<result property="createTime" column="category_create_time"/>
		</association>
	</resultMap>

	<!-- 根据ID查询文章 -->
	<select id="selectById" parameterType="string" resultMap="ArticleResultMap">
		SELECT id, title, content, summary, user_id, category_id, status, 
		       create_time, update_time, publish_time
		FROM article
		WHERE id = #{id}
	</select>

	<!-- 根据ID查询文章详情（包含作者和类别信息） -->
	<select id="selectDetailById" parameterType="string" resultMap="ArticleDetailResultMap">
		SELECT 
			a.id, a.title, a.content, a.summary, a.user_id, a.category_id, a.status, 
			a.publish_time, a.create_time, a.update_time,
			u.id as author_id, u.username as author_username, u.nickname as author_nickname, u.avatar as author_avatar,
			u.gender as author_gender, u.phone as author_phone, u.email as author_email,
			c.id as category_id, c.name as category_name, c.description as category_description,
			c.create_time as category_create_time,
			COALESCE(cc.comment_count, 0) as comment_count,
			COALESCE(fc.favorite_count, 0) as favorite_count
		FROM article a
		LEFT JOIN user u ON a.user_id = u.id
		LEFT JOIN article_category c ON a.category_id = c.id
		LEFT JOIN (SELECT article_id, COUNT(*) as comment_count FROM article_comment GROUP BY article_id) cc ON a.id = cc.article_id
		LEFT JOIN (SELECT article_id, COUNT(*) as favorite_count FROM article_favorite GROUP BY article_id) fc ON a.id = fc.article_id
		WHERE a.id = #{id}
	</select>

	<!-- 查询已发布的文章列表 -->
    <select id="selectPublishedArticles" resultMap="ArticleDetailResultMap">
		SELECT 
			a.id, a.title, a.summary, a.user_id, a.category_id, a.status, 
			a.publish_time, a.create_time, a.update_time,
			u.id as author_id, u.username as author_username, u.nickname as author_nickname, u.avatar as author_avatar,
			u.gender as author_gender, u.phone as author_phone, u.email as author_email,
			c.id as category_id, c.name as category_name, c.description as category_description,
			c.create_time as category_create_time,
			COALESCE(cc.comment_count, 0) as comment_count,
			COALESCE(fc.favorite_count, 0) as favorite_count
		FROM article a
		LEFT JOIN user u ON a.user_id = u.id
		LEFT JOIN article_category c ON a.category_id = c.id
		LEFT JOIN (SELECT article_id, COUNT(*) as comment_count FROM article_comment GROUP BY article_id) cc ON a.id = cc.article_id
		LEFT JOIN (SELECT article_id, COUNT(*) as favorite_count FROM article_favorite GROUP BY article_id) fc ON a.id = fc.article_id
		WHERE a.status = 1
		<choose>
			<when test="sortBy == 'commentCount'">
				ORDER BY comment_count 
				<if test="sortOrder == 'asc'">ASC</if>
				<if test="sortOrder != 'asc'">DESC</if>
			</when>
			<when test="sortBy == 'favoriteCount'">
				ORDER BY favorite_count 
				<if test="sortOrder == 'asc'">ASC</if>
				<if test="sortOrder != 'asc'">DESC</if>
			</when>
			<when test="sortBy == 'createTime'">
				ORDER BY a.create_time 
				<if test="sortOrder == 'asc'">ASC</if>
				<if test="sortOrder != 'asc'">DESC</if>
			</when>
			<otherwise>
				ORDER BY a.publish_time DESC
			</otherwise>
		</choose>
	</select>

	<!-- 搜索文章 -->
	<select id="searchArticles" resultMap="ArticleDetailResultMap">
		SELECT
		a.id, a.title, a.summary, a.user_id, a.category_id, a.status,
		a.create_time, a.update_time,
		u.id as author_id, u.username as author_username,
		u.nickname as author_nickname, u.avatar as author_avatar,
		u.gender as author_gender, u.phone as author_phone, u.email as author_email,
		c.id as category_id, c.name as category_name, c.description as category_description,
		c.create_time as category_create_time,
		COALESCE(cc.comment_count, 0) as comment_count,
		COALESCE(fc.favorite_count, 0) as favorite_count
		FROM article a
		LEFT JOIN user u ON a.user_id = u.id
		LEFT JOIN article_category c ON a.category_id = c.id
		LEFT JOIN (
		SELECT article_id, COUNT(*) as comment_count
		FROM article_comment
		GROUP BY article_id
		) cc ON a.id = cc.article_id
		LEFT JOIN (
		SELECT article_id, COUNT(*) as favorite_count
		FROM article_favorite
		GROUP BY article_id
		) fc ON a.id = fc.article_id
		<where>
			a.status = 1
			<if test="keyword != null and keyword != ''">
				AND (
				a.title LIKE CONCAT('%', #{keyword}, '%')
				OR a.summary LIKE CONCAT('%', #{keyword}, '%')
				OR a.content LIKE CONCAT('%', #{keyword}, '%')
				)
			</if>
			<if test="categoryId != null and categoryId != ''">
				AND a.category_id = #{categoryId}
			</if>
			<if test="startDate != null and startDate != '' and endDate != '' and endDate != null">
				AND a.create_time BETWEEN #{startDate} AND #{endDate}
			</if>
		</where>
		<choose>
			<when test="sortBy == 'commentCount'">
				ORDER BY comment_count
				<if test="sortOrder == 'asc'">ASC</if>
				<if test="sortOrder != 'asc'">DESC</if>
			</when>
			<when test="sortBy == 'favoriteCount'">
				ORDER BY favorite_count
				<if test="sortOrder == 'asc'">ASC</if>
				<if test="sortOrder != 'asc'">DESC</if>
			</when>
			<when test="sortBy == 'createTime' or sortBy == null">
				ORDER BY a.create_time
				<if test="sortOrder == 'asc'">ASC</if>
				<if test="sortOrder != 'asc'">DESC</if>
			</when>
			<otherwise>
				ORDER BY a.create_time DESC
			</otherwise>
		</choose>
	</select>

	<!-- 根据用户ID查询文章 -->
	<select id="selectByUserId" parameterType="string" resultMap="ArticleDetailResultMap">
		SELECT 
			a.id, a.title, a.summary, a.user_id, a.category_id, a.status, 
			a.publish_time, a.create_time, a.update_time,
			u.id as author_id, u.username as author_username, u.nickname as author_nickname, u.avatar as author_avatar,
			u.gender as author_gender, u.phone as author_phone, u.email as author_email,
			c.id as category_id, c.name as category_name, c.description as category_description,
			c.create_time as category_create_time,
			COALESCE(cc.comment_count, 0) as comment_count,
			COALESCE(fc.favorite_count, 0) as favorite_count
		FROM article a
		LEFT JOIN user u ON a.user_id = u.id
		LEFT JOIN article_category c ON a.category_id = c.id
		LEFT JOIN (SELECT article_id, COUNT(*) as comment_count FROM article_comment GROUP BY article_id) cc ON a.id = cc.article_id
		LEFT JOIN (SELECT article_id, COUNT(*) as favorite_count FROM article_favorite GROUP BY article_id) fc ON a.id = fc.article_id
		WHERE a.user_id = #{userId}
		ORDER BY a.create_time DESC
	</select>

	<!-- 根据类别ID查询文章 -->
	<select id="selectByCategoryId" parameterType="string" resultMap="ArticleDetailResultMap">
		SELECT 
			a.id, a.title, a.summary, a.user_id, a.category_id, a.status, 
			a.publish_time, a.create_time, a.update_time,
			u.id as author_id, u.username as author_username, u.nickname as author_nickname, u.avatar as author_avatar,
			u.gender as author_gender, u.phone as author_phone, u.email as author_email,
			c.id as category_id, c.name as category_name, c.description as category_description,
			c.create_time as category_create_time,
			COALESCE(cc.comment_count, 0) as comment_count,
			COALESCE(fc.favorite_count, 0) as favorite_count
		FROM article a
		LEFT JOIN user u ON a.user_id = u.id
		LEFT JOIN article_category c ON a.category_id = c.id
		LEFT JOIN (SELECT article_id, COUNT(*) as favorite_count FROM article_favorite GROUP BY article_id) fc ON a.id = fc.article_id
		WHERE a.category_id = #{categoryId} AND a.status = 1
		<choose>
			<when test="sortBy == 'commentCount'">
				ORDER BY comment_count 
				<if test="sortOrder == 'asc'">ASC</if>
				<if test="sortOrder != 'asc'">DESC</if>
			</when>
			<when test="sortBy == 'favoriteCount'">
				ORDER BY favorite_count 
				<if test="sortOrder == 'asc'">ASC</if>
				<if test="sortOrder != 'asc'">DESC</if>
			</when>
			<when test="sortBy == 'createTime'">
				ORDER BY a.create_time 
				<if test="sortOrder == 'asc'">ASC</if>
				<if test="sortOrder != 'asc'">DESC</if>
			</when>
			<otherwise>
				ORDER BY a.publish_time DESC
			</otherwise>
		</choose>
	</select>

	<!-- 插入文章 -->
	<insert id="insert">
		INSERT INTO article (id, user_id, category_id, title, summary, content, status, create_time, update_time)
		VALUES (#{id}, #{userId}, #{categoryId}, #{title}, #{summary}, #{content}, #{status}, #{createTime}, #{updateTime})
	</insert>

	<!-- 更新文章 -->
	<update id="update">
		UPDATE article
		<set>
			<if test="categoryId != null">category_id = #{categoryId},</if>
			<if test="title != null">title = #{title},</if>
			<if test="summary != null">summary = #{summary},</if>
			<if test="content != null">content = #{content},</if>
			<if test="status != null">status = #{status},</if>

			<if test="updateTime != null">update_time = #{updateTime}</if>
		</set>
		WHERE id = #{id}
	</update>

	<!-- 删除文章 -->
	<delete id="deleteById" parameterType="string">
		DELETE FROM article WHERE id = #{id}
	</delete>

	<!-- 更新文章状态 -->
	<update id="updateStatus">
		UPDATE article
		SET status = #{status}, update_time = NOW()
		WHERE id = #{id}
	</update>

	<!-- 查询文章统计信息 -->
	<select id="selectStatistics" resultMap="ArticleResultMap">
		SELECT 
			id,
			COALESCE(cc.comment_count, 0) as comment_count,
			COALESCE(fc.favorite_count, 0) as favorite_count
		FROM article a
		LEFT JOIN (SELECT article_id, COUNT(*) as comment_count FROM article_comment GROUP BY article_id) cc ON a.id = cc.article_id
		LEFT JOIN (SELECT article_id, COUNT(*) as favorite_count FROM article_favorite GROUP BY article_id) fc ON a.id = fc.article_id
		WHERE a.id = #{articleId}
	</select>

	<!-- 查询最新文章列表 -->
	<select id="selectLatestArticles" resultMap="ArticleDetailResultMap">
		SELECT 
			a.id, a.title, a.summary, a.user_id, a.category_id, a.status, 
			a.publish_time, a.create_time, a.update_time,
			u.id as author_id, u.username as author_username, u.nickname as author_nickname, u.avatar as author_avatar,
			u.gender as author_gender, u.phone as author_phone, u.email as author_email,
			c.id as category_id, c.name as category_name, c.description as category_description,
			c.create_time as category_create_time,
			COALESCE(cc.comment_count, 0) as comment_count,
			COALESCE(fc.favorite_count, 0) as favorite_count
		FROM article a
		LEFT JOIN user u ON a.user_id = u.id
		LEFT JOIN article_category c ON a.category_id = c.id
		LEFT JOIN (SELECT article_id, COUNT(*) as comment_count FROM article_comment GROUP BY article_id) cc ON a.id = cc.article_id
		LEFT JOIN (SELECT article_id, COUNT(*) as favorite_count FROM article_favorite GROUP BY article_id) fc ON a.id = fc.article_id
		WHERE a.status = 1
		<choose>
			<when test="sortBy == 'commentCount'">
				ORDER BY comment_count 
				<if test="sortOrder == 'asc'">ASC</if>
				<if test="sortOrder != 'asc'">DESC</if>
			</when>
			<when test="sortBy == 'favoriteCount'">
				ORDER BY favorite_count 
				<if test="sortOrder == 'asc'">ASC</if>
				<if test="sortOrder != 'asc'">DESC</if>
			</when>
			<when test="sortBy == 'createTime'">
				ORDER BY a.create_time 
				<if test="sortOrder == 'asc'">ASC</if>
				<if test="sortOrder != 'asc'">DESC</if>
			</when>
			<otherwise>
				ORDER BY a.publish_time DESC
			</otherwise>
		</choose>
		LIMIT #{limit}
	</select>

	<!-- 获取文章总数 -->
	<select id="getTotalCount" resultType="long">
		SELECT COUNT(*) FROM article
	</select>

	<!-- 根据条件查询文章列表 -->
	<select id="findByConditions" resultMap="ArticleDetailResultMap">
		SELECT a.id, a.title, a.content, a.summary, a.user_id, a.category_id, a.status,
		       COALESCE(cc.comment_count, 0) as comment_count, COALESCE(fc.favorite_count, 0) as favorite_count, 
		       a.create_time, a.update_time, a.publish_time,
		       u.id as author_id, u.username as author_username, u.nickname as author_nickname, u.avatar as author_avatar,
		       u.gender as author_gender, u.phone as author_phone, u.email as author_email,
		       c.id as category_id, c.name as category_name, c.description as category_description, c.create_time as category_create_time
		FROM article a
		LEFT JOIN user u ON a.user_id = u.id
		LEFT JOIN article_category c ON a.category_id = c.id
		LEFT JOIN (SELECT article_id, COUNT(*) as comment_count FROM article_comment GROUP BY article_id) cc ON a.id = cc.article_id
		LEFT JOIN (SELECT article_id, COUNT(*) as favorite_count FROM article_favorite GROUP BY article_id) fc ON a.id = fc.article_id
		<where>
			<if test="title != null and title != ''">
				AND a.title LIKE CONCAT('%', #{title}, '%')
			</if>
			<if test="authorName != null and authorName != ''">
				AND (u.username LIKE CONCAT('%', #{authorName}, '%') OR u.nickname LIKE CONCAT('%', #{authorName}, '%'))
			</if>
			<if test="categoryName != null and categoryName != ''">
				AND c.name LIKE CONCAT('%', #{categoryName}, '%')
			</if>
			<if test="status != null">
				AND a.status = #{status}
			</if>
			<if test="categoryId != null and categoryId != ''">
				AND a.category_id = #{categoryId}
			</if>
		</where>
		ORDER BY a.create_time DESC
		<if test="offset != null and size != null">
			LIMIT #{size} OFFSET #{offset}
		</if>
	</select>

	<!-- 根据条件统计文章数量 -->
	<select id="countByConditions" resultType="long">
		SELECT COUNT(*) FROM article a
		LEFT JOIN user u ON a.user_id = u.id
		LEFT JOIN article_category c ON a.category_id = c.id
		<where>
			<if test="title != null and title != ''">
				AND a.title LIKE CONCAT('%', #{title}, '%')
			</if>
			<if test="authorName != null and authorName != ''">
				AND (u.username LIKE CONCAT('%', #{authorName}, '%') OR u.nickname LIKE CONCAT('%', #{authorName}, '%'))
			</if>
			<if test="categoryName != null and categoryName != ''">
				AND c.name LIKE CONCAT('%', #{categoryName}, '%')
			</if>
			<if test="status != null">
				AND a.status = #{status}
			</if>
			<if test="categoryId != null and categoryId != ''">
				AND a.category_id = #{categoryId}
			</if>
		</where>
	</select>

	<!-- 批量更新文章状态 -->
	<update id="batchUpdateStatus">
		UPDATE article SET status = #{status}, update_time = NOW()
		WHERE id IN
		<foreach collection="articleIds" item="id" open="(" separator="," close=")">
			#{id}
		</foreach>
	</update>

	<!-- 批量删除文章 -->
	<delete id="batchDeleteArticles">
		DELETE FROM article WHERE id IN
		<foreach collection="articleIds" item="id" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

	<!-- 根据文章ID批量删除评论 -->
	<delete id="batchDeleteCommentsByArticleIds">
		DELETE FROM article_comment WHERE article_id IN
		<foreach collection="articleIds" item="id" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

	<!-- 根据文章ID批量删除收藏 -->
	<delete id="batchDeleteFavoritesByArticleIds">
		DELETE FROM article_favorite WHERE article_id IN
		<foreach collection="articleIds" item="id" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

</mapper>